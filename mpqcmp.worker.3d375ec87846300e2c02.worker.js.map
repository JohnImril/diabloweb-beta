{"version":3,"file":"mpqcmp.worker.3d375ec87846300e2c02.worker.js","mappings":"mBACA,IAAIA,EAAsB,CCD1BA,EAAwB,oB,4DCGlBC,EAASC,KAEf,IAAIC,EAAa,KACbC,EAAe,EACfC,EAAc,KACdC,EAAgB,EAKpB,MAAMC,EAAO,CACZC,UAAAA,CAAWC,GACV,MAAMC,MAAMD,EACb,EAEAE,iBAAAA,CAAkBC,EAAOC,GACxBD,EAAME,IACLX,EAAWY,SACVF,EAAST,EACTS,EAAST,EAAeQ,EAAMI,YAGjC,EACAC,aAAAA,CAAcC,GACbb,EAAc,IAAIc,WAAWD,EAC9B,EACAE,iBAAAA,CAAkBR,EAAOC,GACxBR,EAAYS,IAAIF,EAAOC,EACxB,EAEAQ,QAAAA,CAASC,EAAMC,GAxBhB,IAAkBC,GAyBZF,IAASC,GAASE,YAAYC,MAAQpB,EAAgB,OAzB1CkB,EA0BNF,EAzBXrB,EAAO0B,YAAY,CAAEC,OAAQ,WAAYJ,UA0BvClB,EAAgBmB,YAAYC,MAE9B,GAGDzB,EAAOM,KAAOA,EAuBdN,EAAO4B,iBAAiB,WAAWC,IAAe,IAAd,KAAEC,GAAMD,EAC3C,GACM,QADEC,EAAKH,QAtBdI,eAAkBC,GAA6C,IAA5C,OAAEC,EAAM,IAAEC,EAAG,MAAEC,EAAK,OAAEvB,EAAM,UAAEwB,GAAWJ,EAC3D,MAAMK,QAAaC,EAAU,CAAEC,WAAYN,IAAUO,MAErDtC,EAAa,IAAIgB,WAAWgB,GAC5B/B,EAAeS,EAEf,MAAM6B,EAAQN,EAAMO,OAAS,EACvBC,EAAMN,EAAKO,YAAYT,EAAMpB,YACnCsB,EAAKQ,QAAQhC,IAAIsB,EAAOQ,GAAO,GAE/B,MAAMG,EACLT,EAAKU,eACJnC,EAASV,EAAWwC,OACpBN,EACAK,EACAE,IACI,EAEN,MAAO,CAACvC,EAAY4C,OAAQX,EAAKQ,QAAQI,MAAMH,EAAKA,EAAc,EAARL,GAC3D,EAKGS,CAAIpB,GAAMqB,MACTC,IAAA,IAAEJ,EAAQK,GAAOD,EAAA,OAChBpD,EAAO0B,YAAY,CAAEC,OAAQ,SAAUqB,SAAQK,UAAU,CACxDL,EACAK,EAAOL,QACN,IACFM,GACAtD,EAAO0B,YAAY,CAClBC,OAAQ,QACRnB,MAAO8C,EAAIC,WACXC,MAAOF,EAAIE,SAKhB,G","sources":["../webpack/bootstrap","../webpack/runtime/publicPath","mpqcmp/mpqcmp.worker.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.p = \"/diabloweb-beta/\";","import MpqModule from \"./MpqCmp.jscc\";\r\n\r\n/* eslint-disable-next-line no-restricted-globals */\r\nconst worker = self;\r\n\r\nlet input_file = null;\r\nlet input_offset = 0;\r\nlet output_file = null;\r\nlet last_progress = 0;\r\nfunction progress(value) {\r\n\tworker.postMessage({ action: \"progress\", value });\r\n}\r\n\r\nconst DApi = {\r\n\texit_error(error) {\r\n\t\tthrow Error(error);\r\n\t},\r\n\r\n\tget_file_contents(array, offset) {\r\n\t\tarray.set(\r\n\t\t\tinput_file.subarray(\r\n\t\t\t\toffset - input_offset,\r\n\t\t\t\toffset - input_offset + array.byteLength\r\n\t\t\t)\r\n\t\t);\r\n\t},\r\n\tput_file_size(size) {\r\n\t\toutput_file = new Uint8Array(size);\r\n\t},\r\n\tput_file_contents(array, offset) {\r\n\t\toutput_file.set(array, offset);\r\n\t},\r\n\r\n\tprogress(done, total) {\r\n\t\tif (done === total || performance.now() > last_progress + 100) {\r\n\t\t\tprogress(done);\r\n\t\t\tlast_progress = performance.now();\r\n\t\t}\r\n\t},\r\n};\r\n\r\nworker.DApi = DApi;\r\n\r\nasync function run({ binary, mpq, input, offset, blockSize }) {\r\n\tconst wasm = await MpqModule({ wasmBinary: binary }).ready;\r\n\r\n\tinput_file = new Uint8Array(mpq);\r\n\tinput_offset = offset;\r\n\r\n\tconst count = input.length / 6;\r\n\tconst ptr = wasm._DApi_Alloc(input.byteLength);\r\n\twasm.HEAPU32.set(input, ptr >> 2);\r\n\r\n\tconst dst =\r\n\t\twasm._DApi_Compress(\r\n\t\t\toffset + input_file.length,\r\n\t\t\tblockSize,\r\n\t\t\tcount,\r\n\t\t\tptr\r\n\t\t) >> 2;\r\n\r\n\treturn [output_file.buffer, wasm.HEAPU32.slice(dst, dst + count * 4)];\r\n}\r\n\r\nworker.addEventListener(\"message\", ({ data }) => {\r\n\tswitch (data.action) {\r\n\t\tcase \"run\":\r\n\t\t\trun(data).then(\r\n\t\t\t\t([buffer, blocks]) =>\r\n\t\t\t\t\tworker.postMessage({ action: \"result\", buffer, blocks }, [\r\n\t\t\t\t\t\tbuffer,\r\n\t\t\t\t\t\tblocks.buffer,\r\n\t\t\t\t\t]),\r\n\t\t\t\t(err) =>\r\n\t\t\t\t\tworker.postMessage({\r\n\t\t\t\t\t\taction: \"error\",\r\n\t\t\t\t\t\terror: err.toString(),\r\n\t\t\t\t\t\tstack: err.stack,\r\n\t\t\t\t\t})\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t}\r\n});\r\n"],"names":["__webpack_require__","worker","self","input_file","input_offset","output_file","last_progress","DApi","exit_error","error","Error","get_file_contents","array","offset","set","subarray","byteLength","put_file_size","size","Uint8Array","put_file_contents","progress","done","total","value","performance","now","postMessage","action","addEventListener","_ref2","data","async","_ref","binary","mpq","input","blockSize","wasm","MpqModule","wasmBinary","ready","count","length","ptr","_DApi_Alloc","HEAPU32","dst","_DApi_Compress","buffer","slice","run","then","_ref3","blocks","err","toString","stack"],"sourceRoot":""}