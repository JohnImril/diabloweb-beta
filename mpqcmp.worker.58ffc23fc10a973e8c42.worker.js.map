{"version":3,"file":"mpqcmp.worker.58ffc23fc10a973e8c42.worker.js","mappings":"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","sources":["../node_modules/path-browserify/index.js","mpqcmp/MpqCmp.jscc","../webpack/bootstrap","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","mpqcmp/mpqcmp.worker.js"],"sourcesContent":["// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","\r\nvar MpqCmp = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  return (\r\nfunction(MpqCmp) {\r\n  MpqCmp = MpqCmp || {};\r\n\r\n// The Module object: Our interface to the outside world. We import\r\n// and export values on it. There are various ways Module can be used:\r\n// 1. Not defined. We create it here\r\n// 2. A function parameter, function(Module) { ..generated code.. }\r\n// 3. pre-run appended it, var Module = {}; ..generated code..\r\n// 4. External script tag defines var Module.\r\n// We need to check if Module already exists (e.g. case 3 above).\r\n// Substitution will be replaced with actual code on later stage of the build,\r\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\r\n// Note that if you want to run closure, and also to use Module\r\n// after the generated code, you will need to define   var Module = {};\r\n// before the code. Then that object will be used in the code, and you\r\n// can continue to use Module afterwards as well.\r\nvar Module = typeof MpqCmp !== 'undefined' ? MpqCmp : {};\r\n\r\n// --pre-jses are emitted after the Module integration code, so that they can\r\n// refer to Module (if they choose; they can also define Module)\r\n\r\n\r\n// Sometimes an existing Module object exists with properties\r\n// meant to overwrite the default module functionality. Here\r\n// we collect those properties and reapply _after_ we configure\r\n// the current environment's defaults to avoid having to be so\r\n// defensive during initialization.\r\nvar moduleOverrides = {};\r\nvar key;\r\nfor (key in Module) {\r\n  if (Module.hasOwnProperty(key)) {\r\n    moduleOverrides[key] = Module[key];\r\n  }\r\n}\r\n\r\nModule['arguments'] = [];\r\nModule['thisProgram'] = './this.program';\r\nModule['quit'] = function(status, toThrow) {\r\n  throw toThrow;\r\n};\r\nModule['preRun'] = [];\r\nModule['postRun'] = [];\r\n\r\n// The environment setup code below is customized to use Module.\r\n// *** Environment setup code ***\r\n\r\nvar ENVIRONMENT_IS_WEB = false;\r\nvar ENVIRONMENT_IS_WORKER = false;\r\nvar ENVIRONMENT_IS_NODE = false;\r\nvar ENVIRONMENT_IS_SHELL = false;\r\nENVIRONMENT_IS_WEB = typeof window === 'object';\r\nENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\r\nENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\r\nENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\r\n\r\n\r\n// Three configurations we can be running in:\r\n// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)\r\n// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)\r\n// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)\r\n\r\n\r\n// `/` should be present at the end if `scriptDirectory` is not empty\r\nvar scriptDirectory = '';\r\nfunction locateFile(path) {\r\n  if (Module['locateFile']) {\r\n    return Module['locateFile'](path, scriptDirectory);\r\n  } else {\r\n    return scriptDirectory + path;\r\n  }\r\n}\r\n\r\nif (ENVIRONMENT_IS_NODE) {\r\n  scriptDirectory = __dirname + '/';\r\n\r\n  // Expose functionality in the same simple way that the shells work\r\n  // Note that we pollute the global namespace here, otherwise we break in node\r\n  var nodeFS;\r\n  var nodePath;\r\n\r\n  Module['read'] = function shell_read(filename, binary) {\r\n    var ret;\r\n      if (!nodeFS) nodeFS = require('fs');\r\n      if (!nodePath) nodePath = require('path');\r\n      filename = nodePath['normalize'](filename);\r\n      ret = nodeFS['readFileSync'](filename);\r\n    return binary ? ret : ret.toString();\r\n  };\r\n\r\n  Module['readBinary'] = function readBinary(filename) {\r\n    var ret = Module['read'](filename, true);\r\n    if (!ret.buffer) {\r\n      ret = new Uint8Array(ret);\r\n    }\r\n    assert(ret.buffer);\r\n    return ret;\r\n  };\r\n\r\n  if (process['argv'].length > 1) {\r\n    Module['thisProgram'] = process['argv'][1].replace(/\\\\/g, '/');\r\n  }\r\n\r\n  Module['arguments'] = process['argv'].slice(2);\r\n\r\n  // MODULARIZE will export the module in the proper place outside, we don't need to export here\r\n\r\n  process['on']('uncaughtException', function(ex) {\r\n    // suppress ExitStatus exceptions from showing an error\r\n    if (!(ex instanceof ExitStatus)) {\r\n      throw ex;\r\n    }\r\n  });\r\n  // Currently node will swallow unhandled rejections, but this behavior is\r\n  // deprecated, and in the future it will exit with error status.\r\n  process['on']('unhandledRejection', function(reason, p) {\r\n    process['exit'](1);\r\n  });\r\n\r\n  Module['quit'] = function(status) {\r\n    process['exit'](status);\r\n  };\r\n\r\n  Module['inspect'] = function () { return '[Emscripten Module object]'; };\r\n} else\r\nif (ENVIRONMENT_IS_SHELL) {\r\n\r\n\r\n  if (typeof read != 'undefined') {\r\n    Module['read'] = function shell_read(f) {\r\n      return read(f);\r\n    };\r\n  }\r\n\r\n  Module['readBinary'] = function readBinary(f) {\r\n    var data;\r\n    if (typeof readbuffer === 'function') {\r\n      return new Uint8Array(readbuffer(f));\r\n    }\r\n    data = read(f, 'binary');\r\n    assert(typeof data === 'object');\r\n    return data;\r\n  };\r\n\r\n  if (typeof scriptArgs != 'undefined') {\r\n    Module['arguments'] = scriptArgs;\r\n  } else if (typeof arguments != 'undefined') {\r\n    Module['arguments'] = arguments;\r\n  }\r\n\r\n  if (typeof quit === 'function') {\r\n    Module['quit'] = function(status) {\r\n      quit(status);\r\n    }\r\n  }\r\n} else\r\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\r\n  if (ENVIRONMENT_IS_WEB) {\r\n    if (document.currentScript) {\r\n      scriptDirectory = document.currentScript.src;\r\n    }\r\n  } else { // worker\r\n    scriptDirectory = self.location.href;\r\n  }\r\n  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript\r\n  // is gone, so we saved it, and we use it here instead of any other info.\r\n  if (_scriptDir) {\r\n    scriptDirectory = _scriptDir;\r\n  }\r\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\r\n  // otherwise, slice off the final part of the url to find the script directory.\r\n  if (scriptDirectory.indexOf('blob:') !== 0) {\r\n    scriptDirectory = scriptDirectory.split('/').slice(0, -1).join('/') + '/';\r\n  } else {\r\n    scriptDirectory = '';\r\n  }\r\n\r\n\r\n  Module['read'] = function shell_read(url) {\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open('GET', url, false);\r\n      xhr.send(null);\r\n      return xhr.responseText;\r\n  };\r\n\r\n  if (ENVIRONMENT_IS_WORKER) {\r\n    Module['readBinary'] = function readBinary(url) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('GET', url, false);\r\n        xhr.responseType = 'arraybuffer';\r\n        xhr.send(null);\r\n        return new Uint8Array(xhr.response);\r\n    };\r\n  }\r\n\r\n  Module['readAsync'] = function readAsync(url, onload, onerror) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url, true);\r\n    xhr.responseType = 'arraybuffer';\r\n    xhr.onload = function xhr_onload() {\r\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\r\n        onload(xhr.response);\r\n        return;\r\n      }\r\n      onerror();\r\n    };\r\n    xhr.onerror = onerror;\r\n    xhr.send(null);\r\n  };\r\n\r\n  Module['setWindowTitle'] = function(title) { document.title = title };\r\n} else\r\n{\r\n}\r\n\r\n// Set up the out() and err() hooks, which are how we can print to stdout or\r\n// stderr, respectively.\r\n// If the user provided Module.print or printErr, use that. Otherwise,\r\n// console.log is checked first, as 'print' on the web will open a print dialogue\r\n// printErr is preferable to console.warn (works better in shells)\r\n// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.\r\nvar out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));\r\nvar err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));\r\n\r\n// *** Environment setup code ***\r\n\r\n// Merge back in the overrides\r\nfor (key in moduleOverrides) {\r\n  if (moduleOverrides.hasOwnProperty(key)) {\r\n    Module[key] = moduleOverrides[key];\r\n  }\r\n}\r\n// Free the object hierarchy contained in the overrides, this lets the GC\r\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\r\nmoduleOverrides = undefined;\r\n\r\n\r\n\r\n// {{PREAMBLE_ADDITIONS}}\r\n\r\nvar STACK_ALIGN = 16;\r\n\r\n\r\nfunction staticAlloc(size) {\r\n  var ret = STATICTOP;\r\n  STATICTOP = (STATICTOP + size + 15) & -16;\r\n  return ret;\r\n}\r\n\r\nfunction dynamicAlloc(size) {\r\n  var ret = HEAP32[DYNAMICTOP_PTR>>2];\r\n  var end = (ret + size + 15) & -16;\r\n  HEAP32[DYNAMICTOP_PTR>>2] = end;\r\n  if (end >= TOTAL_MEMORY) {\r\n    var success = enlargeMemory();\r\n    if (!success) {\r\n      HEAP32[DYNAMICTOP_PTR>>2] = ret;\r\n      return 0;\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction alignMemory(size, factor) {\r\n  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default\r\n  var ret = size = Math.ceil(size / factor) * factor;\r\n  return ret;\r\n}\r\n\r\nfunction getNativeTypeSize(type) {\r\n  switch (type) {\r\n    case 'i1': case 'i8': return 1;\r\n    case 'i16': return 2;\r\n    case 'i32': return 4;\r\n    case 'i64': return 8;\r\n    case 'float': return 4;\r\n    case 'double': return 8;\r\n    default: {\r\n      if (type[type.length-1] === '*') {\r\n        return 4; // A pointer\r\n      } else if (type[0] === 'i') {\r\n        var bits = parseInt(type.substr(1));\r\n        assert(bits % 8 === 0);\r\n        return bits / 8;\r\n      } else {\r\n        return 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction warnOnce(text) {\r\n  if (!warnOnce.shown) warnOnce.shown = {};\r\n  if (!warnOnce.shown[text]) {\r\n    warnOnce.shown[text] = 1;\r\n    err(text);\r\n  }\r\n}\r\n\r\nvar asm2wasmImports = { // special asm2wasm imports\r\n    \"f64-rem\": function(x, y) {\r\n        return x % y;\r\n    },\r\n    \"debugger\": function() {\r\n        debugger;\r\n    }\r\n};\r\n\r\n\r\n\r\nvar jsCallStartIndex = 1;\r\nvar functionPointers = new Array(0);\r\n\r\n// 'sig' parameter is only used on LLVM wasm backend\r\nfunction addFunction(func, sig) {\r\n  var base = 0;\r\n  for (var i = base; i < base + 0; i++) {\r\n    if (!functionPointers[i]) {\r\n      functionPointers[i] = func;\r\n      return jsCallStartIndex + i;\r\n    }\r\n  }\r\n  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';\r\n}\r\n\r\nfunction removeFunction(index) {\r\n  functionPointers[index-jsCallStartIndex] = null;\r\n}\r\n\r\nvar funcWrappers = {};\r\n\r\nfunction getFuncWrapper(func, sig) {\r\n  if (!func) return; // on null pointer, return undefined\r\n  assert(sig);\r\n  if (!funcWrappers[sig]) {\r\n    funcWrappers[sig] = {};\r\n  }\r\n  var sigCache = funcWrappers[sig];\r\n  if (!sigCache[func]) {\r\n    // optimize away arguments usage in common cases\r\n    if (sig.length === 1) {\r\n      sigCache[func] = function dynCall_wrapper() {\r\n        return dynCall(sig, func);\r\n      };\r\n    } else if (sig.length === 2) {\r\n      sigCache[func] = function dynCall_wrapper(arg) {\r\n        return dynCall(sig, func, [arg]);\r\n      };\r\n    } else {\r\n      // general case\r\n      sigCache[func] = function dynCall_wrapper() {\r\n        return dynCall(sig, func, Array.prototype.slice.call(arguments));\r\n      };\r\n    }\r\n  }\r\n  return sigCache[func];\r\n}\r\n\r\n\r\nfunction makeBigInt(low, high, unsigned) {\r\n  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));\r\n}\r\n\r\nfunction dynCall(sig, ptr, args) {\r\n  if (args && args.length) {\r\n    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));\r\n  } else {\r\n    return Module['dynCall_' + sig].call(null, ptr);\r\n  }\r\n}\r\n\r\n\r\n\r\nvar Runtime = {\r\n  // FIXME backwards compatibility layer for ports. Support some Runtime.*\r\n  //       for now, fix it there, then remove it from here. That way we\r\n  //       can minimize any period of breakage.\r\n  dynCall: dynCall, // for SDL2 port\r\n};\r\n\r\n// The address globals begin at. Very low in memory, for code size and optimization opportunities.\r\n// Above 0 is static memory, starting with globals.\r\n// Then the stack.\r\n// Then 'dynamic' memory for sbrk.\r\nvar GLOBAL_BASE = 1024;\r\n\r\n\r\n// === Preamble library stuff ===\r\n\r\n// Documentation for the public APIs defined in this file must be updated in:\r\n//    site/source/docs/api_reference/preamble.js.rst\r\n// A prebuilt local version of the documentation is available at:\r\n//    site/build/text/docs/api_reference/preamble.js.txt\r\n// You can also build docs locally as HTML or other formats in site/\r\n// An online HTML version (which may be of a different version of Emscripten)\r\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\r\n\r\n\r\n\r\n//========================================\r\n// Runtime essentials\r\n//========================================\r\n\r\nvar ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()\r\nvar EXITSTATUS = 0;\r\n\r\n/** @type {function(*, string=)} */\r\nfunction assert(condition, text) {\r\n  if (!condition) {\r\n    abort('Assertion failed: ' + text);\r\n  }\r\n}\r\n\r\nvar globalScope = this;\r\n\r\n// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)\r\nfunction getCFunc(ident) {\r\n  var func = Module['_' + ident]; // closure exported function\r\n  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');\r\n  return func;\r\n}\r\n\r\nvar JSfuncs = {\r\n  // Helpers for cwrap -- it can't refer to Runtime directly because it might\r\n  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find\r\n  // out what the minified function name is.\r\n  'stackSave': function() {\r\n    stackSave()\r\n  },\r\n  'stackRestore': function() {\r\n    stackRestore()\r\n  },\r\n  // type conversion from js to c\r\n  'arrayToC' : function(arr) {\r\n    var ret = stackAlloc(arr.length);\r\n    writeArrayToMemory(arr, ret);\r\n    return ret;\r\n  },\r\n  'stringToC' : function(str) {\r\n    var ret = 0;\r\n    if (str !== null && str !== undefined && str !== 0) { // null string\r\n      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\\0'\r\n      var len = (str.length << 2) + 1;\r\n      ret = stackAlloc(len);\r\n      stringToUTF8(str, ret, len);\r\n    }\r\n    return ret;\r\n  }\r\n};\r\n\r\n// For fast lookup of conversion functions\r\nvar toC = {\r\n  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']\r\n};\r\n\r\n\r\n// C calling interface.\r\nfunction ccall(ident, returnType, argTypes, args, opts) {\r\n  function convertReturnValue(ret) {\r\n    if (returnType === 'string') return Pointer_stringify(ret);\r\n    if (returnType === 'boolean') return Boolean(ret);\r\n    return ret;\r\n  }\r\n\r\n  var func = getCFunc(ident);\r\n  var cArgs = [];\r\n  var stack = 0;\r\n  if (args) {\r\n    for (var i = 0; i < args.length; i++) {\r\n      var converter = toC[argTypes[i]];\r\n      if (converter) {\r\n        if (stack === 0) stack = stackSave();\r\n        cArgs[i] = converter(args[i]);\r\n      } else {\r\n        cArgs[i] = args[i];\r\n      }\r\n    }\r\n  }\r\n  var ret = func.apply(null, cArgs);\r\n  ret = convertReturnValue(ret);\r\n  if (stack !== 0) stackRestore(stack);\r\n  return ret;\r\n}\r\n\r\nfunction cwrap(ident, returnType, argTypes, opts) {\r\n  argTypes = argTypes || [];\r\n  // When the function takes numbers and returns a number, we can just return\r\n  // the original function\r\n  var numericArgs = argTypes.every(function(type){ return type === 'number'});\r\n  var numericRet = returnType !== 'string';\r\n  if (numericRet && numericArgs && !opts) {\r\n    return getCFunc(ident);\r\n  }\r\n  return function() {\r\n    return ccall(ident, returnType, argTypes, arguments, opts);\r\n  }\r\n}\r\n\r\n/** @type {function(number, number, string, boolean=)} */\r\nfunction setValue(ptr, value, type, noSafe) {\r\n  type = type || 'i8';\r\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\r\n    switch(type) {\r\n      case 'i1': HEAP8[((ptr)>>0)]=value; break;\r\n      case 'i8': HEAP8[((ptr)>>0)]=value; break;\r\n      case 'i16': HEAP16[((ptr)>>1)]=value; break;\r\n      case 'i32': HEAP32[((ptr)>>2)]=value; break;\r\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;\r\n      case 'float': HEAPF32[((ptr)>>2)]=value; break;\r\n      case 'double': HEAPF64[((ptr)>>3)]=value; break;\r\n      default: abort('invalid type for setValue: ' + type);\r\n    }\r\n}\r\n\r\n/** @type {function(number, string, boolean=)} */\r\nfunction getValue(ptr, type, noSafe) {\r\n  type = type || 'i8';\r\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\r\n    switch(type) {\r\n      case 'i1': return HEAP8[((ptr)>>0)];\r\n      case 'i8': return HEAP8[((ptr)>>0)];\r\n      case 'i16': return HEAP16[((ptr)>>1)];\r\n      case 'i32': return HEAP32[((ptr)>>2)];\r\n      case 'i64': return HEAP32[((ptr)>>2)];\r\n      case 'float': return HEAPF32[((ptr)>>2)];\r\n      case 'double': return HEAPF64[((ptr)>>3)];\r\n      default: abort('invalid type for getValue: ' + type);\r\n    }\r\n  return null;\r\n}\r\n\r\nvar ALLOC_NORMAL = 0; // Tries to use _malloc()\r\nvar ALLOC_STACK = 1; // Lives for the duration of the current function call\r\nvar ALLOC_STATIC = 2; // Cannot be freed\r\nvar ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk\r\nvar ALLOC_NONE = 4; // Do not allocate\r\n\r\n// allocate(): This is for internal use. You can use it yourself as well, but the interface\r\n//             is a little tricky (see docs right below). The reason is that it is optimized\r\n//             for multiple syntaxes to save space in generated code. So you should\r\n//             normally not use allocate(), and instead allocate memory using _malloc(),\r\n//             initialize it with setValue(), and so forth.\r\n// @slab: An array of data, or a number. If a number, then the size of the block to allocate,\r\n//        in *bytes* (note that this is sometimes confusing: the next parameter does not\r\n//        affect this!)\r\n// @types: Either an array of types, one for each byte (or 0 if no type at that position),\r\n//         or a single type which is used for the entire block. This only matters if there\r\n//         is initial data - if @slab is a number, then this does not matter at all and is\r\n//         ignored.\r\n// @allocator: How to allocate memory, see ALLOC_*\r\n/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */\r\nfunction allocate(slab, types, allocator, ptr) {\r\n  var zeroinit, size;\r\n  if (typeof slab === 'number') {\r\n    zeroinit = true;\r\n    size = slab;\r\n  } else {\r\n    zeroinit = false;\r\n    size = slab.length;\r\n  }\r\n\r\n  var singleType = typeof types === 'string' ? types : null;\r\n\r\n  var ret;\r\n  if (allocator == ALLOC_NONE) {\r\n    ret = ptr;\r\n  } else {\r\n    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));\r\n  }\r\n\r\n  if (zeroinit) {\r\n    var stop;\r\n    ptr = ret;\r\n    assert((ret & 3) == 0);\r\n    stop = ret + (size & ~3);\r\n    for (; ptr < stop; ptr += 4) {\r\n      HEAP32[((ptr)>>2)]=0;\r\n    }\r\n    stop = ret + size;\r\n    while (ptr < stop) {\r\n      HEAP8[((ptr++)>>0)]=0;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  if (singleType === 'i8') {\r\n    if (slab.subarray || slab.slice) {\r\n      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);\r\n    } else {\r\n      HEAPU8.set(new Uint8Array(slab), ret);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  var i = 0, type, typeSize, previousType;\r\n  while (i < size) {\r\n    var curr = slab[i];\r\n\r\n    type = singleType || types[i];\r\n    if (type === 0) {\r\n      i++;\r\n      continue;\r\n    }\r\n\r\n    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later\r\n\r\n    setValue(ret+i, curr, type);\r\n\r\n    // no need to look up size unless type changes, so cache it\r\n    if (previousType !== type) {\r\n      typeSize = getNativeTypeSize(type);\r\n      previousType = type;\r\n    }\r\n    i += typeSize;\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready\r\nfunction getMemory(size) {\r\n  if (!staticSealed) return staticAlloc(size);\r\n  if (!runtimeInitialized) return dynamicAlloc(size);\r\n  return _malloc(size);\r\n}\r\n\r\n/** @type {function(number, number=)} */\r\nfunction Pointer_stringify(ptr, length) {\r\n  if (length === 0 || !ptr) return '';\r\n  // Find the length, and check for UTF while doing so\r\n  var hasUtf = 0;\r\n  var t;\r\n  var i = 0;\r\n  while (1) {\r\n    t = HEAPU8[(((ptr)+(i))>>0)];\r\n    hasUtf |= t;\r\n    if (t == 0 && !length) break;\r\n    i++;\r\n    if (length && i == length) break;\r\n  }\r\n  if (!length) length = i;\r\n\r\n  var ret = '';\r\n\r\n  if (hasUtf < 128) {\r\n    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack\r\n    var curr;\r\n    while (length > 0) {\r\n      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));\r\n      ret = ret ? ret + curr : curr;\r\n      ptr += MAX_CHUNK;\r\n      length -= MAX_CHUNK;\r\n    }\r\n    return ret;\r\n  }\r\n  return UTF8ToString(ptr);\r\n}\r\n\r\n// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns\r\n// a copy of that string as a Javascript String object.\r\n\r\nfunction AsciiToString(ptr) {\r\n  var str = '';\r\n  while (1) {\r\n    var ch = HEAP8[((ptr++)>>0)];\r\n    if (!ch) return str;\r\n    str += String.fromCharCode(ch);\r\n  }\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\r\n// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.\r\n\r\nfunction stringToAscii(str, outPtr) {\r\n  return writeAsciiToMemory(str, outPtr, false);\r\n}\r\n\r\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns\r\n// a copy of that string as a Javascript String object.\r\n\r\nvar UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\r\nfunction UTF8ArrayToString(u8Array, idx) {\r\n  var endPtr = idx;\r\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\r\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\r\n  while (u8Array[endPtr]) ++endPtr;\r\n\r\n  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\r\n    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\r\n  } else {\r\n    var u0, u1, u2, u3, u4, u5;\r\n\r\n    var str = '';\r\n    while (1) {\r\n      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\r\n      u0 = u8Array[idx++];\r\n      if (!u0) return str;\r\n      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\r\n      u1 = u8Array[idx++] & 63;\r\n      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\r\n      u2 = u8Array[idx++] & 63;\r\n      if ((u0 & 0xF0) == 0xE0) {\r\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\r\n      } else {\r\n        u3 = u8Array[idx++] & 63;\r\n        if ((u0 & 0xF8) == 0xF0) {\r\n          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n        } else {\r\n          u4 = u8Array[idx++] & 63;\r\n          if ((u0 & 0xFC) == 0xF8) {\r\n            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n          } else {\r\n            u5 = u8Array[idx++] & 63;\r\n            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n          }\r\n        }\r\n      }\r\n      if (u0 < 0x10000) {\r\n        str += String.fromCharCode(u0);\r\n      } else {\r\n        var ch = u0 - 0x10000;\r\n        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns\r\n// a copy of that string as a Javascript String object.\r\n\r\nfunction UTF8ToString(ptr) {\r\n  return UTF8ArrayToString(HEAPU8,ptr);\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',\r\n// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.\r\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\r\n// Parameters:\r\n//   str: the Javascript string to copy.\r\n//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.\r\n//   outIdx: The starting offset in the array to begin the copying.\r\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array.\r\n//                    This count should include the null terminator,\r\n//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.\r\n//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.\r\n// Returns the number of bytes written, EXCLUDING the null terminator.\r\n\r\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\r\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\r\n    return 0;\r\n\r\n  var startIdx = outIdx;\r\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\r\n    var u = str.charCodeAt(i); // possibly a lead surrogate\r\n    if (u >= 0xD800 && u <= 0xDFFF) {\r\n      var u1 = str.charCodeAt(++i);\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      if (outIdx >= endIdx) break;\r\n      outU8Array[outIdx++] = u;\r\n    } else if (u <= 0x7FF) {\r\n      if (outIdx + 1 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xC0 | (u >> 6);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    } else if (u <= 0xFFFF) {\r\n      if (outIdx + 2 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xE0 | (u >> 12);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    } else if (u <= 0x1FFFFF) {\r\n      if (outIdx + 3 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xF0 | (u >> 18);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      if (outIdx + 4 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xF8 | (u >> 24);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    } else {\r\n      if (outIdx + 5 >= endIdx) break;\r\n      outU8Array[outIdx++] = 0xFC | (u >> 30);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\r\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\r\n      outU8Array[outIdx++] = 0x80 | (u & 63);\r\n    }\r\n  }\r\n  // Null-terminate the pointer to the buffer.\r\n  outU8Array[outIdx] = 0;\r\n  return outIdx - startIdx;\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\r\n// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.\r\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\r\n// Returns the number of bytes written, EXCLUDING the null terminator.\r\n\r\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\r\n  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\r\n}\r\n\r\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.\r\n\r\nfunction lengthBytesUTF8(str) {\r\n  var len = 0;\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    var u = str.charCodeAt(i); // possibly a lead surrogate\r\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\n// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns\r\n// a copy of that string as a Javascript String object.\r\n\r\nvar UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;\r\nfunction UTF16ToString(ptr) {\r\n  var endPtr = ptr;\r\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\r\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\r\n  var idx = endPtr >> 1;\r\n  while (HEAP16[idx]) ++idx;\r\n  endPtr = idx << 1;\r\n\r\n  if (endPtr - ptr > 32 && UTF16Decoder) {\r\n    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\r\n  } else {\r\n    var i = 0;\r\n\r\n    var str = '';\r\n    while (1) {\r\n      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\r\n      if (codeUnit == 0) return str;\r\n      ++i;\r\n      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.\r\n      str += String.fromCharCode(codeUnit);\r\n    }\r\n  }\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\r\n// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.\r\n// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.\r\n// Parameters:\r\n//   str: the Javascript string to copy.\r\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\r\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\r\n//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.\r\n//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.\r\n// Returns the number of bytes written, EXCLUDING the null terminator.\r\n\r\nfunction stringToUTF16(str, outPtr, maxBytesToWrite) {\r\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\r\n  if (maxBytesToWrite === undefined) {\r\n    maxBytesToWrite = 0x7FFFFFFF;\r\n  }\r\n  if (maxBytesToWrite < 2) return 0;\r\n  maxBytesToWrite -= 2; // Null terminator.\r\n  var startPtr = outPtr;\r\n  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;\r\n  for (var i = 0; i < numCharsToWrite; ++i) {\r\n    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\r\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\r\n    HEAP16[((outPtr)>>1)]=codeUnit;\r\n    outPtr += 2;\r\n  }\r\n  // Null-terminate the pointer to the HEAP.\r\n  HEAP16[((outPtr)>>1)]=0;\r\n  return outPtr - startPtr;\r\n}\r\n\r\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\r\n\r\nfunction lengthBytesUTF16(str) {\r\n  return str.length*2;\r\n}\r\n\r\nfunction UTF32ToString(ptr) {\r\n  var i = 0;\r\n\r\n  var str = '';\r\n  while (1) {\r\n    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\r\n    if (utf32 == 0)\r\n      return str;\r\n    ++i;\r\n    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    if (utf32 >= 0x10000) {\r\n      var ch = utf32 - 0x10000;\r\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\r\n    } else {\r\n      str += String.fromCharCode(utf32);\r\n    }\r\n  }\r\n}\r\n\r\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\r\n// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.\r\n// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.\r\n// Parameters:\r\n//   str: the Javascript string to copy.\r\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\r\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\r\n//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.\r\n//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.\r\n// Returns the number of bytes written, EXCLUDING the null terminator.\r\n\r\nfunction stringToUTF32(str, outPtr, maxBytesToWrite) {\r\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\r\n  if (maxBytesToWrite === undefined) {\r\n    maxBytesToWrite = 0x7FFFFFFF;\r\n  }\r\n  if (maxBytesToWrite < 4) return 0;\r\n  var startPtr = outPtr;\r\n  var endPtr = startPtr + maxBytesToWrite - 4;\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\r\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\r\n      var trailSurrogate = str.charCodeAt(++i);\r\n      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\r\n    }\r\n    HEAP32[((outPtr)>>2)]=codeUnit;\r\n    outPtr += 4;\r\n    if (outPtr + 4 > endPtr) break;\r\n  }\r\n  // Null-terminate the pointer to the HEAP.\r\n  HEAP32[((outPtr)>>2)]=0;\r\n  return outPtr - startPtr;\r\n}\r\n\r\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\r\n\r\nfunction lengthBytesUTF32(str) {\r\n  var len = 0;\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\r\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\r\n    var codeUnit = str.charCodeAt(i);\r\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\r\n    len += 4;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n// Allocate heap space for a JS string, and write it there.\r\n// It is the responsibility of the caller to free() that memory.\r\nfunction allocateUTF8(str) {\r\n  var size = lengthBytesUTF8(str) + 1;\r\n  var ret = _malloc(size);\r\n  if (ret) stringToUTF8Array(str, HEAP8, ret, size);\r\n  return ret;\r\n}\r\n\r\n// Allocate stack space for a JS string, and write it there.\r\nfunction allocateUTF8OnStack(str) {\r\n  var size = lengthBytesUTF8(str) + 1;\r\n  var ret = stackAlloc(size);\r\n  stringToUTF8Array(str, HEAP8, ret, size);\r\n  return ret;\r\n}\r\n\r\nfunction demangle(func) {\r\n  return func;\r\n}\r\n\r\nfunction demangleAll(text) {\r\n  var regex =\r\n    /__Z[\\w\\d_]+/g;\r\n  return text.replace(regex,\r\n    function(x) {\r\n      var y = demangle(x);\r\n      return x === y ? x : (x + ' [' + y + ']');\r\n    });\r\n}\r\n\r\nfunction jsStackTrace() {\r\n  var err = new Error();\r\n  if (!err.stack) {\r\n    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,\r\n    // so try that as a special-case.\r\n    try {\r\n      throw new Error(0);\r\n    } catch(e) {\r\n      err = e;\r\n    }\r\n    if (!err.stack) {\r\n      return '(no stack trace available)';\r\n    }\r\n  }\r\n  return err.stack.toString();\r\n}\r\n\r\nfunction stackTrace() {\r\n  var js = jsStackTrace();\r\n  if (Module['extraStackTrace']) js += '\\n' + Module['extraStackTrace']();\r\n  return demangleAll(js);\r\n}\r\n\r\n// Memory management\r\n\r\nvar PAGE_SIZE = 16384;\r\nvar WASM_PAGE_SIZE = 65536;\r\nvar ASMJS_PAGE_SIZE = 16777216;\r\nvar MIN_TOTAL_MEMORY = 16777216;\r\n\r\nfunction alignUp(x, multiple) {\r\n  if (x % multiple > 0) {\r\n    x += multiple - (x % multiple);\r\n  }\r\n  return x;\r\n}\r\n\r\nvar HEAP,\r\n/** @type {ArrayBuffer} */\r\n  buffer,\r\n/** @type {Int8Array} */\r\n  HEAP8,\r\n/** @type {Uint8Array} */\r\n  HEAPU8,\r\n/** @type {Int16Array} */\r\n  HEAP16,\r\n/** @type {Uint16Array} */\r\n  HEAPU16,\r\n/** @type {Int32Array} */\r\n  HEAP32,\r\n/** @type {Uint32Array} */\r\n  HEAPU32,\r\n/** @type {Float32Array} */\r\n  HEAPF32,\r\n/** @type {Float64Array} */\r\n  HEAPF64;\r\n\r\nfunction updateGlobalBuffer(buf) {\r\n  Module['buffer'] = buffer = buf;\r\n}\r\n\r\nfunction updateGlobalBufferViews() {\r\n  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);\r\n  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);\r\n  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);\r\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);\r\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);\r\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);\r\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);\r\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);\r\n}\r\n\r\nvar STATIC_BASE, STATICTOP, staticSealed; // static area\r\nvar STACK_BASE, STACKTOP, STACK_MAX; // stack area\r\nvar DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk\r\n\r\n  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;\r\n  staticSealed = false;\r\n\r\n\r\n\r\n\r\nfunction abortOnCannotGrowMemory() {\r\n  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');\r\n}\r\n\r\nif (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {\r\n  var ret;\r\n  try {\r\n    if (ArrayBuffer.transfer) {\r\n      ret = ArrayBuffer.transfer(buffer, size);\r\n    } else {\r\n      var oldHEAP8 = HEAP8;\r\n      ret = new ArrayBuffer(size);\r\n      var temp = new Int8Array(ret);\r\n      temp.set(oldHEAP8);\r\n    }\r\n  } catch(e) {\r\n    return false;\r\n  }\r\n  var success = _emscripten_replace_memory(ret);\r\n  if (!success) return false;\r\n  return ret;\r\n};\r\n\r\nfunction enlargeMemory() {\r\n  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.\r\n\r\n\r\n  var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\r\n  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.\r\n\r\n  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {\r\n    return false;\r\n  }\r\n\r\n  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;\r\n  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.\r\n\r\n  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.\r\n    if (TOTAL_MEMORY <= 536870912) {\r\n      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...\r\n    } else {\r\n      // ..., but after that, add smaller increments towards 2GB, which we cannot reach\r\n      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);\r\n    }\r\n  }\r\n\r\n\r\n  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);\r\n  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {\r\n    // restore the state to before this call, we failed\r\n    TOTAL_MEMORY = OLD_TOTAL_MEMORY;\r\n    return false;\r\n  }\r\n\r\n  // everything worked\r\n\r\n  updateGlobalBuffer(replacement);\r\n  updateGlobalBufferViews();\r\n\r\n\r\n\r\n  return true;\r\n}\r\n\r\nvar byteLength;\r\ntry {\r\n  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);\r\n  byteLength(new ArrayBuffer(4)); // can fail on older ie\r\n} catch(e) { // can fail on older node/v8\r\n  byteLength = function(buffer) { return buffer.byteLength; };\r\n}\r\n\r\nvar TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;\r\nvar TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;\r\nif (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');\r\n\r\n// Initialize the runtime's memory\r\n\r\n\r\n\r\n// Use a provided buffer, if there is one, or else allocate a new one\r\nif (Module['buffer']) {\r\n  buffer = Module['buffer'];\r\n} else {\r\n  // Use a WebAssembly memory where available\r\n  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {\r\n    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE });\r\n    buffer = Module['wasmMemory'].buffer;\r\n  } else\r\n  {\r\n    buffer = new ArrayBuffer(TOTAL_MEMORY);\r\n  }\r\n  Module['buffer'] = buffer;\r\n}\r\nupdateGlobalBufferViews();\r\n\r\n\r\nfunction getTotalMemory() {\r\n  return TOTAL_MEMORY;\r\n}\r\n\r\n// Endianness check (note: assumes compiler arch was little-endian)\r\n\r\nfunction callRuntimeCallbacks(callbacks) {\r\n  while(callbacks.length > 0) {\r\n    var callback = callbacks.shift();\r\n    if (typeof callback == 'function') {\r\n      callback();\r\n      continue;\r\n    }\r\n    var func = callback.func;\r\n    if (typeof func === 'number') {\r\n      if (callback.arg === undefined) {\r\n        Module['dynCall_v'](func);\r\n      } else {\r\n        Module['dynCall_vi'](func, callback.arg);\r\n      }\r\n    } else {\r\n      func(callback.arg === undefined ? null : callback.arg);\r\n    }\r\n  }\r\n}\r\n\r\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\r\nvar __ATINIT__    = []; // functions called during startup\r\nvar __ATMAIN__    = []; // functions called when main() is to be run\r\nvar __ATEXIT__    = []; // functions called during shutdown\r\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\r\n\r\nvar runtimeInitialized = false;\r\nvar runtimeExited = false;\r\n\r\n\r\nfunction preRun() {\r\n  // compatibility - merge in anything from Module['preRun'] at this time\r\n  if (Module['preRun']) {\r\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\r\n    while (Module['preRun'].length) {\r\n      addOnPreRun(Module['preRun'].shift());\r\n    }\r\n  }\r\n  callRuntimeCallbacks(__ATPRERUN__);\r\n}\r\n\r\nfunction ensureInitRuntime() {\r\n  if (runtimeInitialized) return;\r\n  runtimeInitialized = true;\r\n  callRuntimeCallbacks(__ATINIT__);\r\n}\r\n\r\nfunction preMain() {\r\n  callRuntimeCallbacks(__ATMAIN__);\r\n}\r\n\r\nfunction exitRuntime() {\r\n  callRuntimeCallbacks(__ATEXIT__);\r\n  runtimeExited = true;\r\n}\r\n\r\nfunction postRun() {\r\n  // compatibility - merge in anything from Module['postRun'] at this time\r\n  if (Module['postRun']) {\r\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\r\n    while (Module['postRun'].length) {\r\n      addOnPostRun(Module['postRun'].shift());\r\n    }\r\n  }\r\n  callRuntimeCallbacks(__ATPOSTRUN__);\r\n}\r\n\r\nfunction addOnPreRun(cb) {\r\n  __ATPRERUN__.unshift(cb);\r\n}\r\n\r\nfunction addOnInit(cb) {\r\n  __ATINIT__.unshift(cb);\r\n}\r\n\r\nfunction addOnPreMain(cb) {\r\n  __ATMAIN__.unshift(cb);\r\n}\r\n\r\nfunction addOnExit(cb) {\r\n  __ATEXIT__.unshift(cb);\r\n}\r\n\r\nfunction addOnPostRun(cb) {\r\n  __ATPOSTRUN__.unshift(cb);\r\n}\r\n\r\n// Deprecated: This function should not be called because it is unsafe and does not provide\r\n// a maximum length limit of how many bytes it is allowed to write. Prefer calling the\r\n// function stringToUTF8Array() instead, which takes in a maximum length that can be used\r\n// to be secure from out of bounds writes.\r\n/** @deprecated */\r\nfunction writeStringToMemory(string, buffer, dontAddNull) {\r\n  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');\r\n\r\n  var /** @type {number} */ lastChar, /** @type {number} */ end;\r\n  if (dontAddNull) {\r\n    // stringToUTF8Array always appends null. If we don't want to do that, remember the\r\n    // character that existed at the location where the null will be placed, and restore\r\n    // that after the write (below).\r\n    end = buffer + lengthBytesUTF8(string);\r\n    lastChar = HEAP8[end];\r\n  }\r\n  stringToUTF8(string, buffer, Infinity);\r\n  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.\r\n}\r\n\r\nfunction writeArrayToMemory(array, buffer) {\r\n  HEAP8.set(array, buffer);\r\n}\r\n\r\nfunction writeAsciiToMemory(str, buffer, dontAddNull) {\r\n  for (var i = 0; i < str.length; ++i) {\r\n    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);\r\n  }\r\n  // Null-terminate the pointer to the HEAP.\r\n  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;\r\n}\r\n\r\nfunction unSign(value, bits, ignore) {\r\n  if (value >= 0) {\r\n    return value;\r\n  }\r\n  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts\r\n                    : Math.pow(2, bits)         + value;\r\n}\r\nfunction reSign(value, bits, ignore) {\r\n  if (value <= 0) {\r\n    return value;\r\n  }\r\n  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32\r\n                        : Math.pow(2, bits-1);\r\n  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that\r\n                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors\r\n                                                       // TODO: In i64 mode 1, resign the two parts separately and safely\r\n    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts\r\n  }\r\n  return value;\r\n}\r\n\r\n\r\nvar Math_abs = Math.abs;\r\nvar Math_cos = Math.cos;\r\nvar Math_sin = Math.sin;\r\nvar Math_tan = Math.tan;\r\nvar Math_acos = Math.acos;\r\nvar Math_asin = Math.asin;\r\nvar Math_atan = Math.atan;\r\nvar Math_atan2 = Math.atan2;\r\nvar Math_exp = Math.exp;\r\nvar Math_log = Math.log;\r\nvar Math_sqrt = Math.sqrt;\r\nvar Math_ceil = Math.ceil;\r\nvar Math_floor = Math.floor;\r\nvar Math_pow = Math.pow;\r\nvar Math_imul = Math.imul;\r\nvar Math_fround = Math.fround;\r\nvar Math_round = Math.round;\r\nvar Math_min = Math.min;\r\nvar Math_max = Math.max;\r\nvar Math_clz32 = Math.clz32;\r\nvar Math_trunc = Math.trunc;\r\n\r\n// A counter of dependencies for calling run(). If we need to\r\n// do asynchronous work before running, increment this and\r\n// decrement it. Incrementing must happen in a place like\r\n// PRE_RUN_ADDITIONS (used by emcc to add file preloading).\r\n// Note that you can add dependencies in preRun, even though\r\n// it happens right before run - run will be postponed until\r\n// the dependencies are met.\r\nvar runDependencies = 0;\r\nvar runDependencyWatcher = null;\r\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\r\n\r\nfunction getUniqueRunDependency(id) {\r\n  return id;\r\n}\r\n\r\nfunction addRunDependency(id) {\r\n  runDependencies++;\r\n  if (Module['monitorRunDependencies']) {\r\n    Module['monitorRunDependencies'](runDependencies);\r\n  }\r\n}\r\n\r\nfunction removeRunDependency(id) {\r\n  runDependencies--;\r\n  if (Module['monitorRunDependencies']) {\r\n    Module['monitorRunDependencies'](runDependencies);\r\n  }\r\n  if (runDependencies == 0) {\r\n    if (runDependencyWatcher !== null) {\r\n      clearInterval(runDependencyWatcher);\r\n      runDependencyWatcher = null;\r\n    }\r\n    if (dependenciesFulfilled) {\r\n      var callback = dependenciesFulfilled;\r\n      dependenciesFulfilled = null;\r\n      callback(); // can add another dependenciesFulfilled\r\n    }\r\n  }\r\n}\r\n\r\nModule[\"preloadedImages\"] = {}; // maps url to image data\r\nModule[\"preloadedAudios\"] = {}; // maps url to audio data\r\n\r\n\r\n\r\nvar memoryInitializer = null;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\r\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\r\n\r\n// Indicates whether filename is a base64 data URI.\r\nfunction isDataURI(filename) {\r\n  return String.prototype.startsWith ?\r\n      filename.startsWith(dataURIPrefix) :\r\n      filename.indexOf(dataURIPrefix) === 0;\r\n}\r\n\r\n\r\n\r\n\r\nfunction integrateWasmJS() {\r\n  // wasm.js has several methods for creating the compiled code module here:\r\n  //  * 'native-wasm' : use native WebAssembly support in the browser\r\n  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret\r\n  //  * 'interpret-binary': load binary wasm and interpret\r\n  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret\r\n  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)\r\n  // The method is set at compile time (BINARYEN_METHOD)\r\n  // The method can be a comma-separated list, in which case, we will try the\r\n  // options one by one. Some of them can fail gracefully, and then we can try\r\n  // the next.\r\n\r\n  // inputs\r\n\r\n  var method = 'native-wasm';\r\n\r\n  var wasmTextFile = 'MpqCmp.wast';\r\n  var wasmBinaryFile = 'MpqCmp.wasm';\r\n  var asmjsCodeFile = 'MpqCmp.temp.asm.js';\r\n\r\n  if (!isDataURI(wasmTextFile)) {\r\n    wasmTextFile = locateFile(wasmTextFile);\r\n  }\r\n  if (!isDataURI(wasmBinaryFile)) {\r\n    wasmBinaryFile = locateFile(wasmBinaryFile);\r\n  }\r\n  if (!isDataURI(asmjsCodeFile)) {\r\n    asmjsCodeFile = locateFile(asmjsCodeFile);\r\n  }\r\n\r\n  // utilities\r\n\r\n  var wasmPageSize = 64*1024;\r\n\r\n  var info = {\r\n    'global': null,\r\n    'env': null,\r\n    'asm2wasm': asm2wasmImports,\r\n    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.\r\n  };\r\n\r\n  var exports = null;\r\n\r\n\r\n  function mergeMemory(newBuffer) {\r\n    // The wasm instance creates its memory. But static init code might have written to\r\n    // buffer already, including the mem init file, and we must copy it over in a proper merge.\r\n    // TODO: avoid this copy, by avoiding such static init writes\r\n    // TODO: in shorter term, just copy up to the last static init write\r\n    var oldBuffer = Module['buffer'];\r\n    if (newBuffer.byteLength < oldBuffer.byteLength) {\r\n      err('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');\r\n    }\r\n    var oldView = new Int8Array(oldBuffer);\r\n    var newView = new Int8Array(newBuffer);\r\n\r\n\r\n    newView.set(oldView);\r\n    updateGlobalBuffer(newBuffer);\r\n    updateGlobalBufferViews();\r\n  }\r\n\r\n  function fixImports(imports) {\r\n    return imports;\r\n  }\r\n\r\n  function getBinary() {\r\n    try {\r\n      if (Module['wasmBinary']) {\r\n        return new Uint8Array(Module['wasmBinary']);\r\n      }\r\n      if (Module['readBinary']) {\r\n        return Module['readBinary'](wasmBinaryFile);\r\n      } else {\r\n        throw \"both async and sync fetching of the wasm failed\";\r\n      }\r\n    }\r\n    catch (err) {\r\n      abort(err);\r\n    }\r\n  }\r\n\r\n  function getBinaryPromise() {\r\n    // if we don't have the binary yet, and have the Fetch api, use that\r\n    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web\r\n    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {\r\n      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {\r\n        if (!response['ok']) {\r\n          throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\r\n        }\r\n        return response['arrayBuffer']();\r\n      }).catch(function () {\r\n        return getBinary();\r\n      });\r\n    }\r\n    // Otherwise, getBinary should be able to get it synchronously\r\n    return new Promise(function(resolve, reject) {\r\n      resolve(getBinary());\r\n    });\r\n  }\r\n\r\n  // do-method functions\r\n\r\n\r\n  function doNativeWasm(global, env, providedBuffer) {\r\n    if (typeof WebAssembly !== 'object') {\r\n      err('no native wasm support detected');\r\n      return false;\r\n    }\r\n    // prepare memory import\r\n    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {\r\n      err('no native wasm Memory in use');\r\n      return false;\r\n    }\r\n    env['memory'] = Module['wasmMemory'];\r\n    // Load the wasm module and create an instance of using native support in the JS engine.\r\n    info['global'] = {\r\n      'NaN': NaN,\r\n      'Infinity': Infinity\r\n    };\r\n    info['global.Math'] = Math;\r\n    info['env'] = env;\r\n    // handle a generated wasm instance, receiving its exports and\r\n    // performing other necessary setup\r\n    function receiveInstance(instance, module) {\r\n      exports = instance.exports;\r\n      if (exports.memory) mergeMemory(exports.memory);\r\n      Module['asm'] = exports;\r\n      Module[\"usingWasm\"] = true;\r\n      removeRunDependency('wasm-instantiate');\r\n    }\r\n    addRunDependency('wasm-instantiate');\r\n\r\n    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\r\n    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel\r\n    // to any other async startup actions they are performing.\r\n    if (Module['instantiateWasm']) {\r\n      try {\r\n        return Module['instantiateWasm'](info, receiveInstance);\r\n      } catch(e) {\r\n        err('Module.instantiateWasm callback failed with error: ' + e);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function receiveInstantiatedSource(output) {\r\n      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.\r\n      // receiveInstance() will swap in the exports (to Module.asm) so they can be called\r\n      receiveInstance(output['instance'], output['module']);\r\n    }\r\n    function instantiateArrayBuffer(receiver) {\r\n      getBinaryPromise().then(function(binary) {\r\n        return WebAssembly.instantiate(binary, info);\r\n      }).then(receiver).catch(function(reason) {\r\n        err('failed to asynchronously prepare wasm: ' + reason);\r\n        abort(reason);\r\n      });\r\n    }\r\n    // Prefer streaming instantiation if available.\r\n    if (!Module['wasmBinary'] &&\r\n        typeof WebAssembly.instantiateStreaming === 'function' &&\r\n        !isDataURI(wasmBinaryFile) &&\r\n        typeof fetch === 'function') {\r\n      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)\r\n        .then(receiveInstantiatedSource)\r\n        .catch(function(reason) {\r\n          // We expect the most common failure cause to be a bad MIME type for the binary,\r\n          // in which case falling back to ArrayBuffer instantiation should work.\r\n          err('wasm streaming compile failed: ' + reason);\r\n          err('falling back to ArrayBuffer instantiation');\r\n          instantiateArrayBuffer(receiveInstantiatedSource);\r\n        });\r\n    } else {\r\n      instantiateArrayBuffer(receiveInstantiatedSource);\r\n    }\r\n    return {}; // no exports yet; we'll fill them in later\r\n  }\r\n\r\n\r\n  // We may have a preloaded value in Module.asm, save it\r\n  Module['asmPreload'] = Module['asm'];\r\n\r\n  // Memory growth integration code\r\n\r\n  var asmjsReallocBuffer = Module['reallocBuffer'];\r\n\r\n  var wasmReallocBuffer = function(size) {\r\n    var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\r\n    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size\r\n    var old = Module['buffer'];\r\n    var oldSize = old.byteLength;\r\n    if (Module[\"usingWasm\"]) {\r\n      // native wasm support\r\n      try {\r\n        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size\r\n        if (result !== (-1 | 0)) {\r\n          // success in native wasm memory growth, get the buffer from the memory\r\n          return Module['buffer'] = Module['wasmMemory'].buffer;\r\n        } else {\r\n          return null;\r\n        }\r\n      } catch(e) {\r\n        return null;\r\n      }\r\n    }\r\n  };\r\n\r\n  Module['reallocBuffer'] = function(size) {\r\n    if (finalMethod === 'asmjs') {\r\n      return asmjsReallocBuffer(size);\r\n    } else {\r\n      return wasmReallocBuffer(size);\r\n    }\r\n  };\r\n\r\n  // we may try more than one; this is the final one, that worked and we are using\r\n  var finalMethod = '';\r\n\r\n  // Provide an \"asm.js function\" for the application, called to \"link\" the asm.js module. We instantiate\r\n  // the wasm module at that time, and it receives imports and provides exports and so forth, the app\r\n  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.\r\n\r\n  Module['asm'] = function(global, env, providedBuffer) {\r\n    env = fixImports(env);\r\n\r\n    // import table\r\n    if (!env['table']) {\r\n      var TABLE_SIZE = Module['wasmTableSize'];\r\n      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least\r\n      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];\r\n      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {\r\n        if (MAX_TABLE_SIZE !== undefined) {\r\n          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });\r\n        } else {\r\n          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });\r\n        }\r\n      } else {\r\n        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least\r\n      }\r\n      Module['wasmTable'] = env['table'];\r\n    }\r\n\r\n    if (!env['memoryBase']) {\r\n      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves\r\n    }\r\n    if (!env['tableBase']) {\r\n      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change\r\n    }\r\n\r\n    // try the methods. each should return the exports if it succeeded\r\n\r\n    var exports;\r\n    exports = doNativeWasm(global, env, providedBuffer);\r\n\r\n    assert(exports, 'no binaryen method succeeded.');\r\n\r\n\r\n    return exports;\r\n  };\r\n\r\n  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later\r\n}\r\n\r\nintegrateWasmJS();\r\n\r\n// === Body ===\r\n\r\nvar ASM_CONSTS = [];\r\n\r\nfunction _do_error(err){ var end = HEAPU8.indexOf(0, err); var text = String.fromCharCode.apply(null, HEAPU8.subarray(err, end)); self.DApi.exit_error(text); }\r\nfunction _do_progress(done,total){ self.DApi.progress(done, total); }\r\nfunction _get_file_contents(ptr,offset,size){ self.DApi.get_file_contents(HEAPU8.subarray(ptr, ptr + size), offset); }\r\nfunction _put_file_contents(ptr,offset,size){ self.DApi.put_file_contents(HEAPU8.subarray(ptr, ptr + size), offset); }\r\nfunction _put_file_size(size){ self.DApi.put_file_size(size); }\r\n\r\n\r\n\r\nSTATIC_BASE = GLOBAL_BASE;\r\n\r\nSTATICTOP = STATIC_BASE + 28880;\r\n/* global initializers */  __ATINIT__.push();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar STATIC_BUMP = 28880;\r\nModule[\"STATIC_BASE\"] = STATIC_BASE;\r\nModule[\"STATIC_BUMP\"] = STATIC_BUMP;\r\n\r\n/* no memory initializer */\r\nvar tempDoublePtr = STATICTOP; STATICTOP += 16;\r\n\r\nfunction copyTempFloat(ptr) { // functions, because inlining this code increases code size too much\r\n\r\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\r\n\r\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\r\n\r\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\r\n\r\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\r\n\r\n}\r\n\r\nfunction copyTempDouble(ptr) {\r\n\r\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\r\n\r\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\r\n\r\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\r\n\r\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\r\n\r\n  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];\r\n\r\n  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];\r\n\r\n  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];\r\n\r\n  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];\r\n\r\n}\r\n\r\n// {{PRE_LIBRARY}}\r\n\r\n\r\n  function ___assert_fail(condition, filename, line, func) {\r\n      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);\r\n    }\r\n\r\n  function ___cxa_allocate_exception(size) {\r\n      return _malloc(size);\r\n    }\r\n\r\n  function ___cxa_find_matching_catch_2() {\r\n          return ___cxa_find_matching_catch.apply(null, arguments);\r\n        }\r\n\r\n  function ___cxa_free_exception(ptr) {\r\n      try {\r\n        return _free(ptr);\r\n      } catch(e) { // XXX FIXME\r\n      }\r\n    }\r\n\r\n  \r\n  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()\r\n      return !!__ZSt18uncaught_exceptionv.uncaught_exception;\r\n    }\r\n  \r\n  \r\n  \r\n  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {\r\n        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;\r\n        for (var key in EXCEPTIONS.infos) {\r\n          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for\r\n          var info = EXCEPTIONS.infos[ptr];\r\n          if (info.adjusted === adjusted) {\r\n            return ptr;\r\n          }\r\n        }\r\n        return adjusted;\r\n      },addRef:function (ptr) {\r\n        if (!ptr) return;\r\n        var info = EXCEPTIONS.infos[ptr];\r\n        info.refcount++;\r\n      },decRef:function (ptr) {\r\n        if (!ptr) return;\r\n        var info = EXCEPTIONS.infos[ptr];\r\n        assert(info.refcount > 0);\r\n        info.refcount--;\r\n        // A rethrown exception can reach refcount 0; it must not be discarded\r\n        // Its next handler will clear the rethrown flag and addRef it, prior to\r\n        // final decRef and destruction here\r\n        if (info.refcount === 0 && !info.rethrown) {\r\n          if (info.destructor) {\r\n            Module['dynCall_vi'](info.destructor, ptr);\r\n          }\r\n          delete EXCEPTIONS.infos[ptr];\r\n          ___cxa_free_exception(ptr);\r\n        }\r\n      },clearRef:function (ptr) {\r\n        if (!ptr) return;\r\n        var info = EXCEPTIONS.infos[ptr];\r\n        info.refcount = 0;\r\n      }};\r\n  function ___resumeException(ptr) {\r\n      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }\r\n      throw ptr;\r\n    }function ___cxa_find_matching_catch() {\r\n      var thrown = EXCEPTIONS.last;\r\n      if (!thrown) {\r\n        // just pass through the null ptr\r\n        return ((setTempRet0(0),0)|0);\r\n      }\r\n      var info = EXCEPTIONS.infos[thrown];\r\n      var throwntype = info.type;\r\n      if (!throwntype) {\r\n        // just pass through the thrown ptr\r\n        return ((setTempRet0(0),thrown)|0);\r\n      }\r\n      var typeArray = Array.prototype.slice.call(arguments);\r\n  \r\n      var pointer = Module['___cxa_is_pointer_type'](throwntype);\r\n      // can_catch receives a **, add indirection\r\n      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);\r\n      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;\r\n      thrown = ___cxa_find_matching_catch.buffer;\r\n      // The different catch blocks are denoted by different types.\r\n      // Due to inheritance, those types may not precisely match the\r\n      // type of the thrown object. Find one which matches, and\r\n      // return the type of the catch block which should be called.\r\n      for (var i = 0; i < typeArray.length; i++) {\r\n        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {\r\n          thrown = HEAP32[((thrown)>>2)]; // undo indirection\r\n          info.adjusted = thrown;\r\n          return ((setTempRet0(typeArray[i]),thrown)|0);\r\n        }\r\n      }\r\n      // Shouldn't happen unless we have bogus data in typeArray\r\n      // or encounter a type for which emscripten doesn't have suitable\r\n      // typeinfo defined. Best-efforts match just in case.\r\n      thrown = HEAP32[((thrown)>>2)]; // undo indirection\r\n      return ((setTempRet0(throwntype),thrown)|0);\r\n    }function ___cxa_throw(ptr, type, destructor) {\r\n      EXCEPTIONS.infos[ptr] = {\r\n        ptr: ptr,\r\n        adjusted: ptr,\r\n        type: type,\r\n        destructor: destructor,\r\n        refcount: 0,\r\n        caught: false,\r\n        rethrown: false\r\n      };\r\n      EXCEPTIONS.last = ptr;\r\n      if (!(\"uncaught_exception\" in __ZSt18uncaught_exceptionv)) {\r\n        __ZSt18uncaught_exceptionv.uncaught_exception = 1;\r\n      } else {\r\n        __ZSt18uncaught_exceptionv.uncaught_exception++;\r\n      }\r\n      throw ptr;\r\n    }\r\n\r\n  function ___gxx_personality_v0() {\r\n    }\r\n\r\n\r\n  function _abort() {\r\n      Module['abort']();\r\n    }\r\n\r\n   \r\n\r\n  \r\n  function _llvm_exp2_f32(x) {\r\n      return Math.pow(2, x);\r\n    }function _llvm_exp2_f64() {\r\n  return _llvm_exp2_f32.apply(null, arguments)\r\n  }\r\n\r\n  \r\n  function _emscripten_memcpy_big(dest, src, num) {\r\n      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);\r\n      return dest;\r\n    } \r\n\r\n   \r\n\r\n  \r\n  function ___setErrNo(value) {\r\n      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;\r\n      return value;\r\n    } \r\nDYNAMICTOP_PTR = staticAlloc(4);\r\n\r\nSTACK_BASE = STACKTOP = alignMemory(STATICTOP);\r\n\r\nSTACK_MAX = STACK_BASE + TOTAL_STACK;\r\n\r\nDYNAMIC_BASE = alignMemory(STACK_MAX);\r\n\r\nHEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;\r\n\r\nstaticSealed = true; // seal the static portion of memory\r\n\r\nvar ASSERTIONS = false;\r\n\r\n/** @type {function(string, boolean=, number=)} */\r\nfunction intArrayFromString(stringy, dontAddNull, length) {\r\n  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\r\n  var u8array = new Array(len);\r\n  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\r\n  if (dontAddNull) u8array.length = numBytesWritten;\r\n  return u8array;\r\n}\r\n\r\nfunction intArrayToString(array) {\r\n  var ret = [];\r\n  for (var i = 0; i < array.length; i++) {\r\n    var chr = array[i];\r\n    if (chr > 0xFF) {\r\n      if (ASSERTIONS) {\r\n        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\r\n      }\r\n      chr &= 0xFF;\r\n    }\r\n    ret.push(String.fromCharCode(chr));\r\n  }\r\n  return ret.join('');\r\n}\r\n\r\n\r\n\r\nModule['wasmTableSize'] = 163;\r\n\r\nModule['wasmMaxTableSize'] = 163;\r\n\r\nfunction invoke_ii(index,a1) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_ii\"](index,a1);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iii(index,a1,a2) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iii\"](index,a1,a2);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iiii(index,a1,a2,a3) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iiii\"](index,a1,a2,a3);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iiiii(index,a1,a2,a3,a4) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iiiii\"](index,a1,a2,a3,a4);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iiiiii(index,a1,a2,a3,a4,a5) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iiiiii\"](index,a1,a2,a3,a4,a5);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_iiiiiii\"](index,a1,a2,a3,a4,a5,a6);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_ji(index,a1) {\r\n  var sp = stackSave();\r\n  try {\r\n    return Module[\"dynCall_ji\"](index,a1);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_v(index) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_v\"](index);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_vi(index,a1) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_vi\"](index,a1);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_vii(index,a1,a2) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_vii\"](index,a1,a2);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viii(index,a1,a2,a3) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viii\"](index,a1,a2,a3);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viiii(index,a1,a2,a3,a4) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viiii\"](index,a1,a2,a3,a4);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viiiii(index,a1,a2,a3,a4,a5) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viiiii\"](index,a1,a2,a3,a4,a5);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viiiiii\"](index,a1,a2,a3,a4,a5,a6);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nfunction invoke_viji(index,a1,a2,a3,a4) {\r\n  var sp = stackSave();\r\n  try {\r\n    Module[\"dynCall_viji\"](index,a1,a2,a3,a4);\r\n  } catch(e) {\r\n    stackRestore(sp);\r\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\r\n    Module[\"setThrew\"](1, 0);\r\n  }\r\n}\r\n\r\nModule.asmGlobalArg = {};\r\n\r\nModule.asmLibraryArg = { \"abort\": abort, \"assert\": assert, \"enlargeMemory\": enlargeMemory, \"getTotalMemory\": getTotalMemory, \"abortOnCannotGrowMemory\": abortOnCannotGrowMemory, \"invoke_ii\": invoke_ii, \"invoke_iii\": invoke_iii, \"invoke_iiii\": invoke_iiii, \"invoke_iiiii\": invoke_iiiii, \"invoke_iiiiii\": invoke_iiiiii, \"invoke_iiiiiii\": invoke_iiiiiii, \"invoke_ji\": invoke_ji, \"invoke_v\": invoke_v, \"invoke_vi\": invoke_vi, \"invoke_vii\": invoke_vii, \"invoke_viii\": invoke_viii, \"invoke_viiii\": invoke_viiii, \"invoke_viiiii\": invoke_viiiii, \"invoke_viiiiii\": invoke_viiiiii, \"invoke_viji\": invoke_viji, \"__ZSt18uncaught_exceptionv\": __ZSt18uncaught_exceptionv, \"___assert_fail\": ___assert_fail, \"___cxa_allocate_exception\": ___cxa_allocate_exception, \"___cxa_find_matching_catch\": ___cxa_find_matching_catch, \"___cxa_find_matching_catch_2\": ___cxa_find_matching_catch_2, \"___cxa_free_exception\": ___cxa_free_exception, \"___cxa_throw\": ___cxa_throw, \"___gxx_personality_v0\": ___gxx_personality_v0, \"___resumeException\": ___resumeException, \"___setErrNo\": ___setErrNo, \"_abort\": _abort, \"_do_error\": _do_error, \"_do_progress\": _do_progress, \"_emscripten_memcpy_big\": _emscripten_memcpy_big, \"_get_file_contents\": _get_file_contents, \"_llvm_exp2_f32\": _llvm_exp2_f32, \"_llvm_exp2_f64\": _llvm_exp2_f64, \"_put_file_contents\": _put_file_contents, \"_put_file_size\": _put_file_size, \"DYNAMICTOP_PTR\": DYNAMICTOP_PTR, \"tempDoublePtr\": tempDoublePtr, \"ABORT\": ABORT, \"STACKTOP\": STACKTOP, \"STACK_MAX\": STACK_MAX };\r\n// EMSCRIPTEN_START_ASM\r\nvar asm =Module[\"asm\"]// EMSCRIPTEN_END_ASM\r\n(Module.asmGlobalArg, Module.asmLibraryArg, buffer);\r\n\r\nModule[\"asm\"] = asm;\r\nvar _DApi_Alloc = Module[\"_DApi_Alloc\"] = function() {  return Module[\"asm\"][\"_DApi_Alloc\"].apply(null, arguments) };\r\nvar _DApi_Compress = Module[\"_DApi_Compress\"] = function() {  return Module[\"asm\"][\"_DApi_Compress\"].apply(null, arguments) };\r\nvar ___cxa_can_catch = Module[\"___cxa_can_catch\"] = function() {  return Module[\"asm\"][\"___cxa_can_catch\"].apply(null, arguments) };\r\nvar ___cxa_is_pointer_type = Module[\"___cxa_is_pointer_type\"] = function() {  return Module[\"asm\"][\"___cxa_is_pointer_type\"].apply(null, arguments) };\r\nvar ___em_js__do_error = Module[\"___em_js__do_error\"] = function() {  return Module[\"asm\"][\"___em_js__do_error\"].apply(null, arguments) };\r\nvar ___em_js__do_progress = Module[\"___em_js__do_progress\"] = function() {  return Module[\"asm\"][\"___em_js__do_progress\"].apply(null, arguments) };\r\nvar ___em_js__get_file_contents = Module[\"___em_js__get_file_contents\"] = function() {  return Module[\"asm\"][\"___em_js__get_file_contents\"].apply(null, arguments) };\r\nvar ___em_js__put_file_contents = Module[\"___em_js__put_file_contents\"] = function() {  return Module[\"asm\"][\"___em_js__put_file_contents\"].apply(null, arguments) };\r\nvar ___em_js__put_file_size = Module[\"___em_js__put_file_size\"] = function() {  return Module[\"asm\"][\"___em_js__put_file_size\"].apply(null, arguments) };\r\nvar _emscripten_replace_memory = Module[\"_emscripten_replace_memory\"] = function() {  return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null, arguments) };\r\nvar _free = Module[\"_free\"] = function() {  return Module[\"asm\"][\"_free\"].apply(null, arguments) };\r\nvar _llvm_bswap_i32 = Module[\"_llvm_bswap_i32\"] = function() {  return Module[\"asm\"][\"_llvm_bswap_i32\"].apply(null, arguments) };\r\nvar _malloc = Module[\"_malloc\"] = function() {  return Module[\"asm\"][\"_malloc\"].apply(null, arguments) };\r\nvar _memcpy = Module[\"_memcpy\"] = function() {  return Module[\"asm\"][\"_memcpy\"].apply(null, arguments) };\r\nvar _memset = Module[\"_memset\"] = function() {  return Module[\"asm\"][\"_memset\"].apply(null, arguments) };\r\nvar _sbrk = Module[\"_sbrk\"] = function() {  return Module[\"asm\"][\"_sbrk\"].apply(null, arguments) };\r\nvar establishStackSpace = Module[\"establishStackSpace\"] = function() {  return Module[\"asm\"][\"establishStackSpace\"].apply(null, arguments) };\r\nvar getTempRet0 = Module[\"getTempRet0\"] = function() {  return Module[\"asm\"][\"getTempRet0\"].apply(null, arguments) };\r\nvar runPostSets = Module[\"runPostSets\"] = function() {  return Module[\"asm\"][\"runPostSets\"].apply(null, arguments) };\r\nvar setTempRet0 = Module[\"setTempRet0\"] = function() {  return Module[\"asm\"][\"setTempRet0\"].apply(null, arguments) };\r\nvar setThrew = Module[\"setThrew\"] = function() {  return Module[\"asm\"][\"setThrew\"].apply(null, arguments) };\r\nvar stackAlloc = Module[\"stackAlloc\"] = function() {  return Module[\"asm\"][\"stackAlloc\"].apply(null, arguments) };\r\nvar stackRestore = Module[\"stackRestore\"] = function() {  return Module[\"asm\"][\"stackRestore\"].apply(null, arguments) };\r\nvar stackSave = Module[\"stackSave\"] = function() {  return Module[\"asm\"][\"stackSave\"].apply(null, arguments) };\r\nvar dynCall_ii = Module[\"dynCall_ii\"] = function() {  return Module[\"asm\"][\"dynCall_ii\"].apply(null, arguments) };\r\nvar dynCall_iii = Module[\"dynCall_iii\"] = function() {  return Module[\"asm\"][\"dynCall_iii\"].apply(null, arguments) };\r\nvar dynCall_iiii = Module[\"dynCall_iiii\"] = function() {  return Module[\"asm\"][\"dynCall_iiii\"].apply(null, arguments) };\r\nvar dynCall_iiiii = Module[\"dynCall_iiiii\"] = function() {  return Module[\"asm\"][\"dynCall_iiiii\"].apply(null, arguments) };\r\nvar dynCall_iiiiii = Module[\"dynCall_iiiiii\"] = function() {  return Module[\"asm\"][\"dynCall_iiiiii\"].apply(null, arguments) };\r\nvar dynCall_iiiiiii = Module[\"dynCall_iiiiiii\"] = function() {  return Module[\"asm\"][\"dynCall_iiiiiii\"].apply(null, arguments) };\r\nvar dynCall_ji = Module[\"dynCall_ji\"] = function() {  return Module[\"asm\"][\"dynCall_ji\"].apply(null, arguments) };\r\nvar dynCall_v = Module[\"dynCall_v\"] = function() {  return Module[\"asm\"][\"dynCall_v\"].apply(null, arguments) };\r\nvar dynCall_vi = Module[\"dynCall_vi\"] = function() {  return Module[\"asm\"][\"dynCall_vi\"].apply(null, arguments) };\r\nvar dynCall_vii = Module[\"dynCall_vii\"] = function() {  return Module[\"asm\"][\"dynCall_vii\"].apply(null, arguments) };\r\nvar dynCall_viii = Module[\"dynCall_viii\"] = function() {  return Module[\"asm\"][\"dynCall_viii\"].apply(null, arguments) };\r\nvar dynCall_viiii = Module[\"dynCall_viiii\"] = function() {  return Module[\"asm\"][\"dynCall_viiii\"].apply(null, arguments) };\r\nvar dynCall_viiiii = Module[\"dynCall_viiiii\"] = function() {  return Module[\"asm\"][\"dynCall_viiiii\"].apply(null, arguments) };\r\nvar dynCall_viiiiii = Module[\"dynCall_viiiiii\"] = function() {  return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null, arguments) };\r\nvar dynCall_viji = Module[\"dynCall_viji\"] = function() {  return Module[\"asm\"][\"dynCall_viji\"].apply(null, arguments) };\r\n;\r\n\r\n\r\n\r\n// === Auto-generated postamble setup entry stuff ===\r\n\r\nModule['asm'] = asm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Modularize mode returns a function, which can be called to\r\n// create instances. The instances provide a then() method,\r\n// must like a Promise, that receives a callback. The callback\r\n// is called when the module is ready to run, with the module\r\n// as a parameter. (Like a Promise, it also returns the module\r\n// so you can use the output of .then(..)).\r\nModule['then'] = function(func) {\r\n  // We may already be ready to run code at this time. if\r\n  // so, just queue a call to the callback.\r\n  if (Module['calledRun']) {\r\n    func(Module);\r\n  } else {\r\n    // we are not ready to call then() yet. we must call it\r\n    // at the same time we would call onRuntimeInitialized.\r\n    var old = Module['onRuntimeInitialized'];\r\n    Module['onRuntimeInitialized'] = function() {\r\n      if (old) old();\r\n      func(Module);\r\n    };\r\n  }\r\n  return Module;\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @extends {Error}\r\n * @this {ExitStatus}\r\n */\r\nfunction ExitStatus(status) {\r\n  this.name = \"ExitStatus\";\r\n  this.message = \"Program terminated with exit(\" + status + \")\";\r\n  this.status = status;\r\n};\r\nExitStatus.prototype = new Error();\r\nExitStatus.prototype.constructor = ExitStatus;\r\n\r\nvar initialStackTop;\r\nvar calledMain = false;\r\n\r\ndependenciesFulfilled = function runCaller() {\r\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\r\n  if (!Module['calledRun']) run();\r\n  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/** @type {function(Array=)} */\r\nfunction run(args) {\r\n  args = args || Module['arguments'];\r\n\r\n  if (runDependencies > 0) {\r\n    return;\r\n  }\r\n\r\n\r\n  preRun();\r\n\r\n  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later\r\n  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame\r\n\r\n  function doRun() {\r\n    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening\r\n    Module['calledRun'] = true;\r\n\r\n    if (ABORT) return;\r\n\r\n    ensureInitRuntime();\r\n\r\n    preMain();\r\n\r\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\r\n\r\n\r\n    postRun();\r\n  }\r\n\r\n  if (Module['setStatus']) {\r\n    Module['setStatus']('Running...');\r\n    setTimeout(function() {\r\n      setTimeout(function() {\r\n        Module['setStatus']('');\r\n      }, 1);\r\n      doRun();\r\n    }, 1);\r\n  } else {\r\n    doRun();\r\n  }\r\n}\r\nModule['run'] = run;\r\n\r\n\r\nfunction exit(status, implicit) {\r\n\r\n  // if this is just main exit-ing implicitly, and the status is 0, then we\r\n  // don't need to do anything here and can just leave. if the status is\r\n  // non-zero, though, then we need to report it.\r\n  // (we may have warned about this earlier, if a situation justifies doing so)\r\n  if (implicit && Module['noExitRuntime'] && status === 0) {\r\n    return;\r\n  }\r\n\r\n  if (Module['noExitRuntime']) {\r\n  } else {\r\n\r\n    ABORT = true;\r\n    EXITSTATUS = status;\r\n    STACKTOP = initialStackTop;\r\n\r\n    exitRuntime();\r\n\r\n    if (Module['onExit']) Module['onExit'](status);\r\n  }\r\n\r\n  Module['quit'](status, new ExitStatus(status));\r\n}\r\n\r\nvar abortDecorators = [];\r\n\r\nfunction abort(what) {\r\n  if (Module['onAbort']) {\r\n    Module['onAbort'](what);\r\n  }\r\n\r\n  if (what !== undefined) {\r\n    out(what);\r\n    err(what);\r\n    what = JSON.stringify(what)\r\n  } else {\r\n    what = '';\r\n  }\r\n\r\n  ABORT = true;\r\n  EXITSTATUS = 1;\r\n\r\n  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';\r\n}\r\nModule['abort'] = abort;\r\n\r\n// {{PRE_RUN_ADDITIONS}}\r\n\r\nif (Module['preInit']) {\r\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\r\n  while (Module['preInit'].length > 0) {\r\n    Module['preInit'].pop()();\r\n  }\r\n}\r\n\r\n\r\nModule[\"noExitRuntime\"] = true;\r\n\r\nrun();\r\n\r\n// {{POST_RUN_ADDITIONS}}\r\n\r\n\r\n\r\n\r\n\r\n// {{MODULE_ADDITIONS}}\r\n\r\n\r\n\r\nModule['ready'] = new Promise(function (resolve, reject) {\r\n  delete Module['then']\r\n  Module['onAbort'] = function (what) {\r\n    reject(what)\r\n  }\r\n  addOnPostRun(function () {\r\n    resolve(Module)\r\n  })\r\n});\r\n\r\n\r\n\r\n  return MpqCmp;\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n    module.exports = MpqCmp;\r\n  else if (typeof define === 'function' && define['amd'])\r\n    define([], function() { return MpqCmp; });\r\n  else if (typeof exports === 'object')\r\n    exports[\"MpqCmp\"] = MpqCmp;\r\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import MpqModule from \"./MpqCmp.jscc\";\r\n\r\n/* eslint-disable-next-line no-restricted-globals */\r\nconst worker = self;\r\n\r\nlet input_file = null;\r\nlet input_offset = 0;\r\nlet output_file = null;\r\nlet last_progress = 0;\r\nfunction progress(value) {\r\n\tworker.postMessage({ action: \"progress\", value });\r\n}\r\n\r\nconst DApi = {\r\n\texit_error(error) {\r\n\t\tthrow Error(error);\r\n\t},\r\n\r\n\tget_file_contents(array, offset) {\r\n\t\tarray.set(\r\n\t\t\tinput_file.subarray(\r\n\t\t\t\toffset - input_offset,\r\n\t\t\t\toffset - input_offset + array.byteLength\r\n\t\t\t)\r\n\t\t);\r\n\t},\r\n\tput_file_size(size) {\r\n\t\toutput_file = new Uint8Array(size);\r\n\t},\r\n\tput_file_contents(array, offset) {\r\n\t\toutput_file.set(array, offset);\r\n\t},\r\n\r\n\tprogress(done, total) {\r\n\t\tif (done === total || performance.now() > last_progress + 100) {\r\n\t\t\tprogress(done);\r\n\t\t\tlast_progress = performance.now();\r\n\t\t}\r\n\t},\r\n};\r\n\r\nworker.DApi = DApi;\r\n\r\nasync function run({ binary, mpq, input, offset, blockSize }) {\r\n\tconst wasm = await MpqModule({ wasmBinary: binary }).ready;\r\n\r\n\tinput_file = new Uint8Array(mpq);\r\n\tinput_offset = offset;\r\n\r\n\tconst count = input.length / 6;\r\n\tconst ptr = wasm._DApi_Alloc(input.byteLength);\r\n\twasm.HEAPU32.set(input, ptr >> 2);\r\n\r\n\tconst dst =\r\n\t\twasm._DApi_Compress(\r\n\t\t\toffset + input_file.length,\r\n\t\t\tblockSize,\r\n\t\t\tcount,\r\n\t\t\tptr\r\n\t\t) >> 2;\r\n\r\n\treturn [output_file.buffer, wasm.HEAPU32.slice(dst, dst + count * 4)];\r\n}\r\n\r\nworker.addEventListener(\"message\", ({ data }) => {\r\n\tswitch (data.action) {\r\n\t\tcase \"run\":\r\n\t\t\trun(data).then(\r\n\t\t\t\t([buffer, blocks]) =>\r\n\t\t\t\t\tworker.postMessage({ action: \"result\", buffer, blocks }, [\r\n\t\t\t\t\t\tbuffer,\r\n\t\t\t\t\t\tblocks.buffer,\r\n\t\t\t\t\t]),\r\n\t\t\t\t(err) =>\r\n\t\t\t\t\tworker.postMessage({\r\n\t\t\t\t\t\taction: \"error\",\r\n\t\t\t\t\t\terror: err.toString(),\r\n\t\t\t\t\t\tstack: err.stack,\r\n\t\t\t\t\t})\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t}\r\n});\r\n"],"names":["assertPath","path","TypeError","JSON","stringify","normalizeStringPosix","allowAboveRoot","code","res","lastSegmentLength","lastSlash","dots","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","posix","resolve","cwd","resolvedPath","resolvedAbsolute","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","from","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","dir","root","base","name","_format","parse","ret","delimiter","win32","module","exports","MpqCmp","_scriptDir","document","currentScript","src","key","Module","moduleOverrides","hasOwnProperty","status","toThrow","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","window","importScripts","nodeFS","nodePath","scriptDirectory","locateFile","__dirname","filename","binary","toString","buffer","Uint8Array","assert","replace","ex","ExitStatus","reason","p","read","f","data","readbuffer","scriptArgs","quit","self","location","href","indexOf","split","url","xhr","XMLHttpRequest","open","send","responseText","responseType","response","onload","onerror","title","console","log","bind","print","err","printErr","warn","staticAlloc","size","STATICTOP","alignMemory","factor","Math","ceil","asm2wasmImports","x","y","Array","ABORT","condition","text","abort","Pointer_stringify","ptr","t","hasUtf","HEAPU8","curr","MAX_CHUNK","String","fromCharCode","apply","subarray","min","u8Array","idx","endPtr","UTF8Decoder","decode","u0","u1","u2","u3","u4","str","ch","UTF8ArrayToString","UTF8ToString","TextDecoder","HEAP8","HEAP32","STACK_BASE","STACKTOP","STACK_MAX","DYNAMIC_BASE","DYNAMICTOP_PTR","WASM_PAGE_SIZE","ASMJS_PAGE_SIZE","MIN_TOTAL_MEMORY","alignUp","multiple","updateGlobalBuffer","buf","updateGlobalBufferViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","enlargeMemory","PAGE_MULTIPLE","LIMIT","OLD_TOTAL_MEMORY","TOTAL_MEMORY","max","replacement","byteLength","ArrayBuffer","transfer","oldHEAP8","set","e","_emscripten_replace_memory","Function","prototype","call","Object","getOwnPropertyDescriptor","get","TOTAL_STACK","callRuntimeCallbacks","callbacks","callback","shift","func","WebAssembly","Memory","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runtimeInitialized","addOnPostRun","cb","unshift","abs","cos","sin","tan","acos","asin","atan","atan2","exp","sqrt","floor","pow","imul","fround","round","clz32","trunc","runDependencies","runDependencyWatcher","dependenciesFulfilled","dataURIPrefix","isDataURI","startsWith","wasmTextFile","wasmBinaryFile","asmjsCodeFile","info","getBinary","doNativeWasm","global","env","providedBuffer","receiveInstance","instance","memory","newBuffer","oldBuffer","oldView","mergeMemory","clearInterval","removeRunDependency","NaN","Infinity","receiveInstantiatedSource","output","instantiateArrayBuffer","receiver","fetch","Promise","reject","credentials","then","catch","instantiate","instantiateStreaming","asmjsReallocBuffer","finalMethod","oldSize","grow","wasmReallocBuffer","TABLE_SIZE","MAX_TABLE_SIZE","Table","element","integrateWasmJS","STATIC_BASE","push","tempDoublePtr","___cxa_free_exception","_free","__ZSt18uncaught_exceptionv","uncaught_exception","EXCEPTIONS","last","caught","infos","deAdjust","adjusted","addRef","refcount","decRef","rethrown","destructor","clearRef","___cxa_find_matching_catch","thrown","setTempRet0","throwntype","type","typeArray","_malloc","_llvm_exp2_f32","asmGlobalArg","asmLibraryArg","index","a1","sp","stackSave","stackRestore","a2","a3","a4","a5","a6","line","value","DApi","exit_error","done","total","progress","dest","num","offset","get_file_contents","put_file_contents","put_file_size","asm","this","message","old","Error","constructor","run","args","doRun","postRun","preRun","setTimeout","runCaller","what","pop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","obj","prop","worker","input_file","input_offset","output_file","last_progress","error","array","performance","now","postMessage","action","addEventListener","_ref2","async","_ref","mpq","input","blockSize","wasm","MpqModule","wasmBinary","ready","count","_DApi_Alloc","HEAPU32","dst","_DApi_Compress","_ref3","blocks","stack"],"sourceRoot":""}